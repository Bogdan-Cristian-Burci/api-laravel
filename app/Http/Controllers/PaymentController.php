<?php

namespace App\Http\Controllers;


use Netopia\Payment\Address;
use Netopia\Payment\Invoice;
use Netopia\Payment\Request\Card;
use Netopia\Payment\Request\PaymentAbstract;
use Illuminate\Http\Request;
class PaymentController extends ApiController
{

    /**
     * all payment requests will be sent to the NETOPIA Payments server
     * SANDBOX : http://sandboxsecure.mobilpay.ro
     * LIVE : https://secure.mobilpay.ro
     */
    public $paymentUrl;
    /**
     * NETOPIA Payments is working only with Certificate. Each NETOPIA partner (merchant) has a certificate.
     * From your Admin panel you can download the Certificate.
     * is located in Admin -> Conturi de comerciant -> Detalii -> Setari securitate
     * the var $x509FilePath is path of your certificate in your platform
     * i.e: /home/certificates/public.cer
     */
    public $x509FilePath;
    /**
     * Billing Address
     */
    public $billingAddress;
    /**
     * Shipping Address
     */
    public $shippingAddress;

    public $errorCode;
    public $errorType;
    public $errorMessage;
    public function getPaymentForm(){


        $user=request()->user();

        $this->paymentUrl   = 'http://sandboxsecure.mobilpay.ro';
        $this->x509FilePath = storage_path('app/sandbox.2R4O-SDR2-JZSR-Y7WJ-KIEZ.public.cer');

        $returnPaymentUrl =  config('app.url');
        $confirmPaymentUrl =  config('app.url').'api/payment/return';

        try {
            $paymentRequest = new Card();
            $paymentRequest->signature  = config('netopia.signature');//signature - generated by mobilpay.ro for every merchant account
            $paymentRequest->orderId    = md5(uniqid(rand())); // order_id should be unique for a merchant account
            $paymentRequest->confirmUrl = $confirmPaymentUrl;
            $paymentRequest->returnUrl  = $returnPaymentUrl;

            /*
             * Invoices info
             */
            $paymentRequest->invoice = new Invoice();
            $paymentRequest->invoice->currency  = 'RON';
            $paymentRequest->invoice->amount    = '20.00';
            $paymentRequest->invoice->tokenId   = null;
            $paymentRequest->invoice->details   = "Plata servicii Pro Fiduciaria";

            /*
             * Billing Info
             */
            $this->billingAddress = new Address();
            $this->billingAddress->type         = "person"; //should be "person" / "company"
            $this->billingAddress->firstName    = $user->name;
            $this->billingAddress->lastName     = $user->name;
            $this->billingAddress->address      = "Bulevardul Ion CreangÄƒ, Nr 00";
            $this->billingAddress->email        = $user->email;
            $this->billingAddress->mobilePhone  = "0732123456";
            $paymentRequest->invoice->setBillingAddress($this->billingAddress);

//            /*
//             * Shipping
//             */
//            $this->shippingAddress = new Address();
//            $this->shippingAddress->type        = "person"; //should be "person" / "company"
//            $this->shippingAddress->firstName   = "Shipping Name";
//            $this->shippingAddress->lastName    = "Shipping LastName";
//            $this->shippingAddress->address     = "Bulevardul Mihai Eminescu, Nr 00";
//            $this->shippingAddress->email       = "bogdan.cristian.burci@gmail.com";
//            $this->shippingAddress->mobilePhone = "0726735659";
//            $paymentRequest->invoice->setShippingAddress($this->shippingAddress);

            /*
             * encrypting
             */
            $paymentRequest->encrypt($this->x509FilePath);

            /**
             * send the following data to NETOPIA Payments server
             * Method : POST
             * URL : $paymentUrl
             */
            $envKey = $paymentRequest->getEnvKey();
            $data   = $paymentRequest->getEncData();
            $url = route('form',['env'=>$envKey,'data'=>$data]);
            //$url = config('app.url').'form?env='.$envKey.'&data='.$data;

        }catch (\Exception $e)
        {
            return  $this->errorResponse($e->getCode(), $e->getMessage());
        }

        return response()->json(['env'=>$envKey, 'data'=>$data, 'url'=>$url]);
    }

    public function instantPaymentNotification(Request $request){

        $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_NONE;
        $this->errorCode = 0;
        $this->errorMessage = '';

        $this->paymentUrl = 'http://sandboxsecure.mobilpay.ro';
        $this->x509FilePath = storage_path('app/sandbox.2R4O-SDR2-JZSR-Y7WJ-KIEZprivate.key');

        if (strcasecmp($_SERVER['REQUEST_METHOD'], 'post') == 0){
            \Log::info('it is a post request ');
            if(isset($_POST['env_key']) && isset($_POST['data'])){
                try {
                    $paymentRequestIpn = PaymentAbstract::factoryFromEncrypted($_POST['env_key'],$_POST['data'],$this->x509FilePath);
                    $rrn = $paymentRequestIpn->objPmNotify->rrn;
                    \Log::info('rrn is '.json_encode($rrn));
                    \Log::info('------------------------------------------');

                    \Log::info('$paymentRequestIpn is '.json_encode($paymentRequestIpn));
                    if ($paymentRequestIpn->objPmNotify->errorCode == 0) {
                        switch($paymentRequestIpn->objPmNotify->action){
                            case 'confirmed':
                                //update DB, SET status = "confirmed/captured"
                                \Log::info('confirmed ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            case 'confirmed_pending':
                                //update DB, SET status = "pending"
                                \Log::info('pending ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            case 'paid_pending':
                                //update DB, SET status = "pending"
                                \Log::info('paid_pending ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            case 'paid':
                                //update DB, SET status = "open/preauthorized"
                                \Log::info('paid ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            case 'canceled':
                                //update DB, SET status = "canceled"
                                \Log::info('canceled ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            case 'credit':
                                //update DB, SET status = "refunded"
                                \Log::info('credit ');
                                $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                                break;
                            default:
                                \Log::info('default ');
                                $errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                                $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_ACTION;
                                $this->errorMessage = 'mobilpay_refference_action paramaters is invalid';
                        }
                    }else{
                        //update DB, SET status = "rejected"
                        \Log::info('rejected ');
                        $this->errorMessage = $paymentRequestIpn->objPmNotify->errorMessage;
                    }
                }catch (\Exception $e) {
                    \Log::info('try failed '.$e->getCode().' message:'.$e->getMessage());
                    $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_TEMPORARY;
                    $this->errorCode = $e->getCode();
                    $this->errorMessage = $e->getMessage();
                }

            }else{
                $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
                $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_PARAMETERS;
                $this->errorMessage = 'mobilpay.ro posted invalid parameters';
            }

        } else {
            $this->errorType = PaymentAbstract::CONFIRM_ERROR_TYPE_PERMANENT;
            $this->errorCode = PaymentAbstract::ERROR_CONFIRM_INVALID_POST_METHOD;
            $this->errorMessage = 'invalid request metod for payment confirmation';
        }

        /**
         * Communicate with NETOPIA Payments server
         */

        header('Content-type: application/xml');
        echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
        if($this->errorCode == 0)
        {
            echo "<crc>{$this->errorMessage}</crc>";
        }
        else
        {
            echo "<crc error_type=\"{$this->errorType}\" error_code=\"{$this->errorCode}\">{$this->errorMessage}</crc>";
        }
    }

    public function return(Request $request){
        \Log::info('From return '.json_encode($request));
    }
}
